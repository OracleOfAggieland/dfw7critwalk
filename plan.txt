# Crit Walk Dashboard - Complete Build Instructions for Coding Agent

## Project Overview

Build a web application for maintenance technicians at a distribution facility to manage critical equipment inspections ("crit walks"). The system tracks equipment, photo uploads, time since last inspection, and assignments with color-coded status indicators.

**Brand Identity**: DFW7 RME (Reliability Maintenance Engineering)

---

## Technology Stack

- **Frontend**: React 18+ with TypeScript, Vite, Tailwind CSS
- **Backend**: Firebase (Authentication, Firestore, Storage, Hosting, Cloud Functions)
- **State Management**: React Context API
- **Routing**: React Router v6
- **Date Handling**: date-fns
- **Forms**: React Hook Form

---

## Phase 1: Project Setup & Configuration

### Step 1.1: Initialize React Project

```bash
# Create new Vite + React + TypeScript project
npm create vite@latest crit-walk-dashboard -- --template react-ts

cd crit-walk-dashboard

# Install core dependencies
npm install

# Install Firebase
npm install firebase

# Install additional dependencies
npm install react-router-dom
npm install date-fns
npm install react-hook-form

# Install Tailwind CSS
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

### Step 1.2: Design System & Brand Colors

**File: `tailwind.config.js`**
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        // Brand colors from DFW7 RME logo
        brand: {
          blue: '#003F87',      // Texas flag blue
          red: '#BF0A30',       // Texas flag red
          gear: '#808080',      // Gear gray
          'blue-light': '#1E5BA8',
          'red-light': '#D93A3A',
        },
        // Status colors for crit walks
        status: {
          green: '#10B981',     // Good status
          yellow: '#F59E0B',    // Warning status
          red: '#EF4444',       // Critical status
          gray: '#6B7280',      // Never completed
        }
      },
      fontFamily: {
        sans: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'sans-serif'],
      },
    },
  },
  plugins: [],
}
```

**File: `src/index.css`**
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply font-sans antialiased;
  }
}

@layer components {
  /* Button styles */
  .btn-primary {
    @apply bg-brand-blue text-white px-4 py-2 rounded-md font-medium hover:bg-brand-blue-light transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed;
  }
  
  .btn-secondary {
    @apply bg-gray-200 text-gray-800 px-4 py-2 rounded-md font-medium hover:bg-gray-300 transition-colors disabled:bg-gray-100 disabled:cursor-not-allowed;
  }
  
  .btn-danger {
    @apply bg-brand-red text-white px-4 py-2 rounded-md font-medium hover:bg-brand-red-light transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed;
  }

  /* Input styles */
  .input-field {
    @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brand-blue focus:border-transparent;
  }

  /* Card styles */
  .card {
    @apply bg-white rounded-lg shadow-md p-6;
  }

  .card-hover {
    @apply bg-white rounded-lg shadow-md p-6 cursor-pointer hover:shadow-lg transition-shadow;
  }

  /* Status badge styles */
  .badge-green {
    @apply bg-green-100 text-green-800 px-2 py-1 rounded text-sm font-medium;
  }

  .badge-yellow {
    @apply bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-sm font-medium;
  }

  .badge-red {
    @apply bg-red-100 text-red-800 px-2 py-1 rounded text-sm font-medium;
  }

  .badge-gray {
    @apply bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm font-medium;
  }
}
```

### Step 1.3: Add Logo to Project

Create the following directory structure for assets:
```
src/
├── assets/
│   ├── logo.svg (provided logo)
│   └── logo-small.svg (optional - smaller version for header)
```

**Instructions for logo file:**
1. Save the provided DFW7 RME logo as `src/assets/logo.svg`
2. The logo should be used on:
   - Login page (large, centered)
   - Header/navigation (small, left side)
   - Loading screens (optional)

**File: `src/assets/Logo.tsx`** (React component wrapper)
```typescript
interface LogoProps {
  size?: 'small' | 'medium' | 'large';
  className?: string;
}

export function Logo({ size = 'medium', className = '' }: LogoProps) {
  const sizeClasses = {
    small: 'w-12 h-12',
    medium: 'w-24 h-24',
    large: 'w-32 h-32'
  };

  return (
    <img
      src="/src/assets/logo.svg"
      alt="DFW7 RME Logo"
      className={`${sizeClasses[size]} ${className}`}
    />
  );
}
```

### Step 1.4: Firebase Setup

```bash
# Install Firebase CLI globally
npm install -g firebase-tools

# Login to Firebase
firebase login

# Initialize Firebase in project
firebase init

# Select the following:
# - Firestore
# - Storage
# - Hosting
# - Functions (TypeScript)
```

**Firebase Configuration Selections:**
- Firestore: Use default rules file, default indexes
- Storage: Use default rules file
- Hosting: Set public directory to `dist`, configure as SPA (Yes), no automatic builds
- Functions: TypeScript, ESLint yes, install dependencies yes

### Step 1.5: Create Firebase Project in Console

1. Go to https://console.firebase.google.com
2. Create new project: "crit-walk-dashboard" or "dfw7-critwalk"
3. Enable Google Analytics (optional)
4. Go to Authentication → Sign-in method → Email/Password → Enable
5. Go to Authentication → Users → Add User
   - Email: `dfw7rme@critwalk.com`
   - Password: `dfw7rme`

### Step 1.6: Environment Configuration

**File: `.env`**
```env
VITE_FIREBASE_API_KEY=your_api_key_here
VITE_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your_project_id
VITE_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
VITE_FIREBASE_APP_ID=your_app_id

VITE_TEAM_LOGIN_EMAIL=dfw7rme@critwalk.com
VITE_TEAM_LOGIN_PASSWORD=dfw7rme
```

**File: `.env.example`** (for documentation)
```env
VITE_FIREBASE_API_KEY=
VITE_FIREBASE_AUTH_DOMAIN=
VITE_FIREBASE_PROJECT_ID=
VITE_FIREBASE_STORAGE_BUCKET=
VITE_FIREBASE_MESSAGING_SENDER_ID=
VITE_FIREBASE_APP_ID=

VITE_TEAM_LOGIN_EMAIL=dfw7rme@critwalk.com
VITE_TEAM_LOGIN_PASSWORD=dfw7rme
```

Add to `.gitignore`:
```
.env
.env.local
```

---

## Phase 2: Project Structure Setup

### Step 2.1: Create Directory Structure

```
src/
├── assets/
│   ├── logo.svg
│   └── Logo.tsx
├── components/
│   ├── common/
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   │   ├── Modal.tsx
│   │   ├── StatusBadge.tsx
│   │   └── LoadingSpinner.tsx
│   ├── equipment/
│   │   ├── EquipmentCard.tsx
│   │   ├── EquipmentGrid.tsx
│   │   ├── EquipmentForm.tsx
│   │   └── EquipmentDetails.tsx
│   ├── critWalk/
│   │   ├── CritWalkForm.tsx
│   │   ├── PhotoUpload.tsx
│   │   ├── CritWalkHistory.tsx
│   │   └── CritWalkCard.tsx
│   ├── assignments/
│   │   ├── AssignmentList.tsx
│   │   ├── AssignmentForm.tsx
│   │   └── AssignmentCard.tsx
│   ├── UserSelection.tsx
│   └── Layout.tsx
├── pages/
│   ├── Login.tsx
│   ├── Dashboard.tsx
│   ├── EquipmentDetail.tsx
│   └── Assignments.tsx
├── services/
│   ├── firebase.ts
│   ├── auth.service.ts
│   ├── equipment.service.ts
│   ├── critWalk.service.ts
│   ├── storage.service.ts
│   └── assignment.service.ts
├── hooks/
│   ├── useAuth.ts
│   ├── useEquipment.ts
│   ├── useCritWalks.ts
│   └── useAssignments.ts
├── contexts/
│   └── UserContext.tsx
├── types/
│   ├── equipment.types.ts
│   ├── critWalk.types.ts
│   ├── user.types.ts
│   └── assignment.types.ts
├── data/
│   └── teamMembers.ts
├── utils/
│   ├── statusCalculator.ts
│   └── dateHelpers.ts
├── App.tsx
├── main.tsx
└── index.css
```

---

## Phase 3: Core Type Definitions

### Step 3.1: User Types

**File: `src/types/user.types.ts`**
```typescript
export type Role = 'manager' | 'technician';

export interface UserProfile {
  name: string;
  role: Role;
  timestamp: number;
}
```

### Step 3.2: Equipment Types

**File: `src/types/equipment.types.ts`**
```typescript
import { Timestamp } from 'firebase/firestore';

export interface Equipment {
  id: string;
  name: string;
  description: string;
  location: string;
  category: string;
  createdBy: string;
  createdAt: Timestamp;
  isActive: boolean;
  critWalkInterval: number; // in hours
  expectedPhotoCount: number;
  photoGuidelines?: string;
  tags?: string[];
}

export interface EquipmentStatus {
  lastCritWalkAt: Timestamp | null;
  lastCritWalkBy: string | null;
  nextDueBy: Timestamp | null;
  status: 'green' | 'yellow' | 'red' | 'never';
  totalWalksCompleted: number;
}

export interface EquipmentFormData {
  name: string;
  description: string;
  location: string;
  category: string;
  critWalkInterval: number;
  expectedPhotoCount: number;
  photoGuidelines?: string;
}
```

### Step 3.3: Crit Walk Types

**File: `src/types/critWalk.types.ts`**
```typescript
import { Timestamp } from 'firebase/firestore';

export interface CritWalkPhoto {
  storageUrl: string;
  thumbnailUrl?: string;
  uploadedAt: Timestamp;
}

export interface CritWalk {
  id: string;
  equipmentId: string;
  equipmentName: string;
  technicianName: string;
  completedAt: Timestamp;
  notes?: string;
  photos: CritWalkPhoto[];
}

export interface CritWalkFormData {
  equipmentId: string;
  notes?: string;
  photos: File[];
}
```

### Step 3.4: Assignment Types

**File: `src/types/assignment.types.ts`**
```typescript
import { Timestamp } from 'firebase/firestore';

export type AssignmentStatus = 'pending' | 'completed' | 'overdue';

export interface Assignment {
  id: string;
  equipmentId: string;
  equipmentName: string;
  technicianName: string;
  assignedBy: string;
  assignedAt: Timestamp;
  dueBy?: Timestamp;
  status: AssignmentStatus;
  completedAt?: Timestamp;
  critWalkId?: string;
}

export interface AssignmentFormData {
  equipmentId: string;
  technicianName: string;
  dueBy?: Date;
}
```

---

## Phase 4: Team Members Data

### Step 4.1: Team Members List

**File: `src/data/teamMembers.ts`**
```typescript
export const TEAM_MEMBERS = [
  'Aaron Burke',
  'Aaron Delao',
  'Aaron Rhodes',
  'Adrian Rodriguez',
  'Alberto Mata-Fierro',
  'Alejandro Cuellar',
  'Alex Rabel',
  'Alexa Heltz',
  'Alexandru Bratu',
  'Alexis Alcocer Bulnes',
  'Anna Font',
  'Bernard Bruner',
  'Biruk Kassa',
  'Blake Leighton',
  'Bobby Allen',
  'Bobby Slone',
  'Brandon Felder',
  'Brayan Lagunas',
  'Chris Dickinson',
  'Christian Chapman',
  'Daryl Cua',
  'David Bond',
  'Derion Caldwell',
  'Elaine Kowalski',
  'Eli McClain',
  'Emmanuel Turrubiates',
  'Eric Garcia',
  'Gabriel Barron',
  'Geobin George',
  'Gerardo Diaz',
  'Hagen Davis',
  'Hector Gonzalez',
  'Jacob Moore',
  'Jacob Pawley',
  'Jarell Sherrod',
  'Jeff Britt',
  'Jeff Netherton',
  'Jon Liptak',
  'Juan Green',
  'Justin Ponce',
  'Kevin White',
  'Kurt Bruner',
  'Lyle Bailey',
  'Maria Canham',
  'Marshall Eldredge',
  'Matt Avila',
  'Matt Privette',
  'Matt Templeton',
  'Matthew Weathersby',
  'Michael Torres',
  'Nathan Lin',
  'Nicholas Bernardi',
  'Noah Olmeda',
  'Pat Martinez',
  'Patrick Henderson',
  'Phil Thompson',
  'Quincy Lane',
  'Rafael Munoz Gonzalez',
  'Ricardo Mitchell',
  'Robert Haus',
  'Ron Petty',
  'Ryan Bass',
  'Ryan Blake',
  'Terry Davis',
  'Theresa Pena',
  'Thom Spencer',
  'Tommy Haliburton',
  'Tommy League',
  'Victor Baray',
  'Victor Reyes',
  'Wes Featherston',
  'Willie Farmer',
  'Zachary Porter'
].sort();

export const EQUIPMENT_CATEGORIES = [
  'HVAC',
  'Conveyor System',
  'Electrical',
  'Forklift',
  'Dock Equipment',
  'Safety Equipment',
  'Other'
];
```

---

## Phase 5: Firebase Service Layer

### Step 5.1: Firebase Initialization

**File: `src/services/firebase.ts`**
```typescript
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID
};

const app = initializeApp(firebaseConfig);

export const auth = getAuth(app);
export const db = getFirestore(app);
export const storage = getStorage(app);
```

### Step 5.2: Auth Service

**File: `src/services/auth.service.ts`**
```typescript
import { signInWithEmailAndPassword, signOut } from 'firebase/auth';
import { auth } from './firebase';

export const loginAsTeam = async () => {
  const email = import.meta.env.VITE_TEAM_LOGIN_EMAIL;
  const password = import.meta.env.VITE_TEAM_LOGIN_PASSWORD;
  
  try {
    await signInWithEmailAndPassword(auth, email, password);
    return { success: true };
  } catch (error) {
    console.error('Login failed:', error);
    return { success: false, error };
  }
};

export const logout = async () => {
  try {
    await signOut(auth);
    localStorage.removeItem('userProfile');
    return { success: true };
  } catch (error) {
    console.error('Logout failed:', error);
    return { success: false, error };
  }
};
```

### Step 5.3: Equipment Service

**File: `src/services/equipment.service.ts`**
```typescript
import {
  collection,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  getDocs,
  getDoc,
  query,
  where,
  orderBy,
  Timestamp,
  serverTimestamp
} from 'firebase/firestore';
import { db } from './firebase';
import { Equipment, EquipmentFormData, EquipmentStatus } from '../types/equipment.types';

const EQUIPMENT_COLLECTION = 'equipment';
const EQUIPMENT_STATUS_COLLECTION = 'equipmentStatus';

export const createEquipment = async (
  data: EquipmentFormData,
  createdBy: string
): Promise<string> => {
  try {
    const equipmentData = {
      ...data,
      createdBy,
      createdAt: serverTimestamp(),
      isActive: true
    };

    const docRef = await addDoc(collection(db, EQUIPMENT_COLLECTION), equipmentData);

    // Initialize equipment status
    await addDoc(collection(db, EQUIPMENT_STATUS_COLLECTION), {
      equipmentId: docRef.id,
      lastCritWalkAt: null,
      lastCritWalkBy: null,
      nextDueBy: null,
      status: 'never',
      totalWalksCompleted: 0
    });

    return docRef.id;
  } catch (error) {
    console.error('Error creating equipment:', error);
    throw new Error('Failed to create equipment');
  }
};

export const getAllEquipment = async (): Promise<Equipment[]> => {
  try {
    const q = query(
      collection(db, EQUIPMENT_COLLECTION),
      where('isActive', '==', true),
      orderBy('createdAt', 'desc')
    );
    
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    } as Equipment));
  } catch (error) {
    console.error('Error fetching equipment:', error);
    throw new Error('Failed to fetch equipment');
  }
};

export const getEquipmentById = async (id: string): Promise<Equipment | null> => {
  try {
    const docRef = doc(db, EQUIPMENT_COLLECTION, id);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      return { id: docSnap.id, ...docSnap.data() } as Equipment;
    }
    return null;
  } catch (error) {
    console.error('Error fetching equipment:', error);
    throw new Error('Failed to fetch equipment');
  }
};

export const updateEquipment = async (
  id: string,
  data: Partial<EquipmentFormData>
): Promise<void> => {
  try {
    const docRef = doc(db, EQUIPMENT_COLLECTION, id);
    await updateDoc(docRef, data);
  } catch (error) {
    console.error('Error updating equipment:', error);
    throw new Error('Failed to update equipment');
  }
};

export const deleteEquipment = async (id: string): Promise<void> => {
  try {
    const docRef = doc(db, EQUIPMENT_COLLECTION, id);
    await updateDoc(docRef, { isActive: false });
  } catch (error) {
    console.error('Error deleting equipment:', error);
    throw new Error('Failed to delete equipment');
  }
};

export const getEquipmentStatus = async (equipmentId: string): Promise<EquipmentStatus | null> => {
  try {
    const q = query(
      collection(db, EQUIPMENT_STATUS_COLLECTION),
      where('equipmentId', '==', equipmentId)
    );
    
    const snapshot = await getDocs(q);
    if (snapshot.empty) return null;
    
    return snapshot.docs[0].data() as EquipmentStatus;
  } catch (error) {
    console.error('Error fetching equipment status:', error);
    return null;
  }
};

export const getAllEquipmentStatuses = async (): Promise<Map<string, EquipmentStatus>> => {
  try {
    const snapshot = await getDocs(collection(db, EQUIPMENT_STATUS_COLLECTION));
    const statusMap = new Map<string, EquipmentStatus>();
    
    snapshot.docs.forEach(doc => {
      const data = doc.data() as EquipmentStatus & { equipmentId: string };
      statusMap.set(data.equipmentId, data);
    });
    
    return statusMap;
  } catch (error) {
    console.error('Error fetching equipment statuses:', error);
    return new Map();
  }
};
```

### Step 5.4: Storage Service

**File: `src/services/storage.service.ts`**
```typescript
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { storage } from './firebase';

export const uploadPhoto = async (
  equipmentId: string,
  critWalkId: string,
  photo: File,
  index: number
): Promise<string> => {
  try {
    const timestamp = Date.now();
    const fileName = `${timestamp}_${index}.jpg`;
    const storageRef = ref(
      storage,
      `equipment/${equipmentId}/critwalks/${critWalkId}/${fileName}`
    );

    // Compress/resize image if needed (optional for prototype)
    const optimizedPhoto = await optimizeImage(photo);

    await uploadBytes(storageRef, optimizedPhoto);
    const downloadUrl = await getDownloadURL(storageRef);
    
    return downloadUrl;
  } catch (error) {
    console.error('Error uploading photo:', error);
    throw new Error('Failed to upload photo');
  }
};

const optimizeImage = async (file: File): Promise<Blob> => {
  // For prototype, return as-is
  // Future: Add image compression/resizing
  return file;
};

export const uploadMultiplePhotos = async (
  equipmentId: string,
  critWalkId: string,
  photos: File[]
): Promise<string[]> => {
  try {
    const uploadPromises = photos.map((photo, index) =>
      uploadPhoto(equipmentId, critWalkId, photo, index)
    );
    
    return await Promise.all(uploadPromises);
  } catch (error) {
    console.error('Error uploading photos:', error);
    throw new Error('Failed to upload photos');
  }
};
```

### Step 5.5: Crit Walk Service

**File: `src/services/critWalk.service.ts`**
```typescript
import {
  collection,
  addDoc,
  getDocs,
  query,
  where,
  orderBy,
  limit,
  Timestamp,
  serverTimestamp,
  updateDoc,
  doc
} from 'firebase/firestore';
import { db } from './firebase';
import { CritWalk, CritWalkFormData, CritWalkPhoto } from '../types/critWalk.types';
import { uploadMultiplePhotos } from './storage.service';

const EQUIPMENT_COLLECTION = 'equipment';
const EQUIPMENT_STATUS_COLLECTION = 'equipmentStatus';

export const createCritWalk = async (
  data: CritWalkFormData,
  technicianName: string,
  equipmentName: string
): Promise<string> => {
  try {
    // Create placeholder crit walk to get ID
    const critWalkData = {
      equipmentId: data.equipmentId,
      equipmentName,
      technicianName,
      completedAt: serverTimestamp(),
      notes: data.notes || '',
      photos: []
    };

    const critWalkRef = await addDoc(
      collection(db, EQUIPMENT_COLLECTION, data.equipmentId, 'critWalks'),
      critWalkData
    );

    // Upload photos
    const photoUrls = await uploadMultiplePhotos(
      data.equipmentId,
      critWalkRef.id,
      data.photos
    );

    // Update with photo URLs
    const photos: CritWalkPhoto[] = photoUrls.map(url => ({
      storageUrl: url,
      uploadedAt: Timestamp.now()
    }));

    await updateDoc(critWalkRef, { photos });

    // Update equipment status
    await updateEquipmentStatus(data.equipmentId, technicianName);

    return critWalkRef.id;
  } catch (error) {
    console.error('Error creating crit walk:', error);
    throw new Error('Failed to create crit walk');
  }
};

const updateEquipmentStatus = async (
  equipmentId: string,
  technicianName: string
): Promise<void> => {
  try {
    const now = Timestamp.now();
    
    // Find status document
    const q = query(
      collection(db, EQUIPMENT_STATUS_COLLECTION),
      where('equipmentId', '==', equipmentId)
    );
    
    const snapshot = await getDocs(q);
    
    if (!snapshot.empty) {
      const statusDoc = snapshot.docs[0];
      await updateDoc(statusDoc.ref, {
        lastCritWalkAt: now,
        lastCritWalkBy: technicianName,
        status: 'green',
        totalWalksCompleted: (statusDoc.data().totalWalksCompleted || 0) + 1
      });
    }
  } catch (error) {
    console.error('Error updating equipment status:', error);
  }
};

export const getCritWalksByEquipment = async (
  equipmentId: string,
  limitCount: number = 50
): Promise<CritWalk[]> => {
  try {
    const q = query(
      collection(db, EQUIPMENT_COLLECTION, equipmentId, 'critWalks'),
      orderBy('completedAt', 'desc'),
      limit(limitCount)
    );
    
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    } as CritWalk));
  } catch (error) {
    console.error('Error fetching crit walks:', error);
    return [];
  }
};
```

### Step 5.6: Assignment Service

**File: `src/services/assignment.service.ts`**
```typescript
import {
  collection,
  addDoc,
  updateDoc,
  doc,
  getDocs,
  query,
  where,
  orderBy,
  Timestamp,
  serverTimestamp
} from 'firebase/firestore';
import { db } from './firebase';
import { Assignment, AssignmentFormData } from '../types/assignment.types';

const ASSIGNMENTS_COLLECTION = 'assignments';

export const createAssignment = async (
  data: AssignmentFormData,
  assignedBy: string,
  equipmentName: string
): Promise<string> => {
  try {
    const assignmentData = {
      equipmentId: data.equipmentId,
      equipmentName,
      technicianName: data.technicianName,
      assignedBy,
      assignedAt: serverTimestamp(),
      dueBy: data.dueBy ? Timestamp.fromDate(data.dueBy) : null,
      status: 'pending' as const
    };

    const docRef = await addDoc(collection(db, ASSIGNMENTS_COLLECTION), assignmentData);
    return docRef.id;
  } catch (error) {
    console.error('Error creating assignment:', error);
    throw new Error('Failed to create assignment');
  }
};

export const getAssignmentsByTechnician = async (
  technicianName: string
): Promise<Assignment[]> => {
  try {
    const q = query(
      collection(db, ASSIGNMENTS_COLLECTION),
      where('technicianName', '==', technicianName),
      where('status', '==', 'pending'),
      orderBy('assignedAt', 'desc')
    );
    
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    } as Assignment));
  } catch (error) {
    console.error('Error fetching assignments:', error);
    return [];
  }
};

export const getAllAssignments = async (): Promise<Assignment[]> => {
  try {
    const q = query(
      collection(db, ASSIGNMENTS_COLLECTION),
      orderBy('assignedAt', 'desc')
    );
    
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    } as Assignment));
  } catch (error) {
    console.error('Error fetching all assignments:', error);
    return [];
  }
};

export const completeAssignment = async (
  assignmentId: string,
  critWalkId: string
): Promise<void> => {
  try {
    const docRef = doc(db, ASSIGNMENTS_COLLECTION, assignmentId);
    await updateDoc(docRef, {
      status: 'completed',
      completedAt: serverTimestamp(),
      critWalkId
    });
  } catch (error) {
    console.error('Error completing assignment:', error);
    throw new Error('Failed to complete assignment');
  }
};
```

---

## Phase 6: Utility Functions

### Step 6.1: Status Calculator

**File: `src/utils/statusCalculator.ts`**
```typescript
import { Timestamp } from 'firebase/firestore';

export type StatusColor = 'green' | 'yellow' | 'red' | 'never';

export const calculateStatus = (
  lastCritWalkAt: Timestamp | null,
  critWalkInterval: number = 12
): StatusColor => {
  if (!lastCritWalkAt) return 'never';

  const now = new Date();
  const lastWalk = lastCritWalkAt.toDate();
  const hoursSince = (now.getTime() - lastWalk.getTime()) / (1000 * 60 * 60);

  if (hoursSince <= 8) return 'green';
  if (hoursSince <= 12) return 'yellow';
  return 'red';
};

export const getStatusColor = (status: StatusColor): string => {
  switch (status) {
    case 'green':
      return 'bg-status-green';
    case 'yellow':
      return 'bg-status-yellow';
    case 'red':
      return 'bg-status-red';
    case 'never':
      return 'bg-status-gray';
  }
};

export const getStatusBorderColor = (status: StatusColor): string => {
  switch (status) {
    case 'green':
      return 'border-status-green';
    case 'yellow':
      return 'border-status-yellow';
    case 'red':
      return 'border-status-red';
    case 'never':
      return 'border-status-gray';
  }
};

export const getStatusTextColor = (status: StatusColor): string => {
  switch (status) {
    case 'green':
      return 'text-green-700';
    case 'yellow':
      return 'text-yellow-700';
    case 'red':
      return 'text-red-700';
    case 'never':
      return 'text-gray-700';
  }
};

export const getStatusBgClass = (status: StatusColor): string => {
  switch (status) {
    case 'green':
      return 'bg-green-100';
    case 'yellow':
      return 'bg-yellow-100';
    case 'red':
      return 'bg-red-100';
    case 'never':
      return 'bg-gray-100';
  }
};
```

### Step 6.2: Date Helpers

**File: `src/utils/dateHelpers.ts`**
```typescript
import { formatDistanceToNow, format } from 'date-fns';
import { Timestamp } from 'firebase/firestore';

export const formatTimestamp = (timestamp: Timestamp | null): string => {
  if (!timestamp) return 'Never';
  return format(timestamp.toDate(), 'MMM dd, yyyy h:mm a');
};

export const formatTimeAgo = (timestamp: Timestamp | null): string => {
  if (!timestamp) return 'Never';
  return formatDistanceToNow(timestamp.toDate(), { addSuffix: true });
};

export const getHoursSince = (timestamp: Timestamp | null): number => {
  if (!timestamp) return Infinity;
  const now = new Date();
  const date = timestamp.toDate();
  return (now.getTime() - date.getTime()) / (1000 * 60 * 60);
};
```

---

## Phase 7: Context & Hooks

### Step 7.1: User Context

**File: `src/contexts/UserContext.tsx`**
```typescript
import { createContext, useContext, ReactNode } from 'react';
import { UserProfile } from '../types/user.types';

interface UserContextType {
  userProfile: UserProfile;
  isManager: boolean;
  isTechnician: boolean;
}

const UserContext = createContext<UserContextType | null>(null);

export function UserProvider({
  children,
  userProfile
}: {
  children: ReactNode;
  userProfile: UserProfile;
}) {
  const value = {
    userProfile,
    isManager: userProfile.role === 'manager',
    isTechnician: userProfile.role === 'technician'
  };

  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;
}

export function useUser() {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error('useUser must be used within UserProvider');
  }
  return context;
}
```

### Step 7.2: Equipment Hook

**File: `src/hooks/useEquipment.ts`**
```typescript
import { useState, useEffect } from 'react';
import { collection, query, where, onSnapshot } from 'firebase/firestore';
import { db } from '../services/firebase';
import { Equipment, EquipmentStatus } from '../types/equipment.types';
import { calculateStatus } from '../utils/statusCalculator';

export function useEquipment() {
  const [equipment, setEquipment] = useState<Equipment[]>([]);
  const [statuses, setStatuses] = useState<Map<string, EquipmentStatus>>(new Map());
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const equipmentQuery = query(
      collection(db, 'equipment'),
      where('isActive', '==', true)
    );

    const unsubscribe = onSnapshot(equipmentQuery, (snapshot) => {
      const equipmentData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as Equipment));
      
      setEquipment(equipmentData);
      setLoading(false);
    });

    return unsubscribe;
  }, []);

  useEffect(() => {
    const statusQuery = query(collection(db, 'equipmentStatus'));

    const unsubscribe = onSnapshot(statusQuery, (snapshot) => {
      const statusMap = new Map<string, EquipmentStatus>();
      
      snapshot.docs.forEach(doc => {
        const data = doc.data();
        const equipmentId = data.equipmentId;
        
        // Calculate current status based on time
        const currentStatus = calculateStatus(data.lastCritWalkAt);
        
        statusMap.set(equipmentId, {
          ...data,
          status: currentStatus
        } as EquipmentStatus);
      });
      
      setStatuses(statusMap);
    });

    return unsubscribe;
  }, []);

  return { equipment, statuses, loading };
}
```

---

## Phase 8: Component Development

### Step 8.1: Common Components

**File: `src/components/common/LoadingSpinner.tsx`**
```typescript
export function LoadingSpinner() {
  return (
    <div className="flex items-center justify-center p-8">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-brand-blue"></div>
    </div>
  );
}
```

**File: `src/components/common/StatusBadge.tsx`**
```typescript
import { StatusColor, getStatusColor, getStatusTextColor, getStatusBgClass } from '../../utils/statusCalculator';

interface StatusBadgeProps {
  status: StatusColor;
  size?: 'small' | 'medium' | 'large';
}

export function StatusBadge({ status, size = 'medium' }: StatusBadgeProps) {
  const sizeClasses = {
    small: 'w-3 h-3',
    medium: 'w-4 h-4',
    large: 'w-6 h-6'
  };

  const label = status === 'never' ? 'No Data' : status.toUpperCase();

  return (
    <div className="flex items-center gap-2">
      <div className={`rounded-full ${getStatusColor(status)} ${sizeClasses[size]}`} />
      <span className={`text-sm font-medium ${getStatusTextColor(status)}`}>
        {label}
      </span>
    </div>
  );
}
```

**File: `src/components/common/Modal.tsx`**
```typescript
import { ReactNode } from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: ReactNode;
  size?: 'small' | 'medium' | 'large';
}

export function Modal({ isOpen, onClose, title, children, size = 'medium' }: ModalProps) {
  if (!isOpen) return null;

  const sizeClasses = {
    small: 'max-w-md',
    medium: 'max-w-2xl',
    large: 'max-w-4xl'
  };

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:p-0">
        {/* Backdrop */}
        <div
          className="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75"
          onClick={onClose}
        />

        {/* Modal */}
        <div className={`relative inline-block w-full ${sizeClasses[size]} overflow-hidden text-left align-middle transition-all transform bg-white rounded-lg shadow-xl`}>
          {/* Header */}
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium text-gray-900">{title}</h3>
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-gray-500"
              >
                <span className="text-2xl">&times;</span>
              </button>
            </div>
          </div>

          {/* Body */}
          <div className="px-6 py-4">{children}</div>
        </div>
      </div>
    </div>
  );
}
```

**File: `src/components/common/Button.tsx`**
```typescript
import { ReactNode } from 'react';

interface ButtonProps {
  children: ReactNode;
  onClick?: () => void;
  type?: 'button' | 'submit';
  variant?: 'primary' | 'secondary' | 'danger';
  disabled?: boolean;
  fullWidth?: boolean;
}

export function Button({
  children,
  onClick,
  type = 'button',
  variant = 'primary',
  disabled = false,
  fullWidth = false
}: ButtonProps) {
  const variantClasses = {
    primary: 'btn-primary',
    secondary: 'btn-secondary',
    danger: 'btn-danger'
  };

  const widthClass = fullWidth ? 'w-full' : '';

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`${variantClasses[variant]} ${widthClass}`}
    >
      {children}
    </button>
  );
}
```

### Step 8.2: User Selection Component

**File: `src/components/UserSelection.tsx`**
```typescript
import { useState } from 'react';
import { TEAM_MEMBERS } from '../data/teamMembers';
import { UserProfile, Role } from '../types/user.types';
import { Logo } from '../assets/Logo';

interface UserSelectionProps {
  onUserSelected: (profile: UserProfile) => void;
}

export function UserSelection({ onUserSelected }: UserSelectionProps) {
  const [selectedName, setSelectedName] = useState('');
  const [selectedRole, setSelectedRole] = useState<Role | ''>('');
  const [searchTerm, setSearchTerm] = useState('');

  const filteredMembers = TEAM_MEMBERS.filter(name =>
    name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleContinue = () => {
    if (selectedName && selectedRole) {
      const profile: UserProfile = {
        name: selectedName,
        role: selectedRole,
        timestamp: Date.now()
      };

      localStorage.setItem('userProfile', JSON.stringify(profile));
      onUserSelected(profile);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full">
        {/* Logo */}
        <div className="flex justify-center mb-4">
          <Logo size="large" />
        </div>

        <h1 className="text-2xl font-bold mb-2 text-center">Welcome to Crit Walk Dashboard</h1>
        <p className="text-gray-600 mb-6 text-center">Select your name and role to continue</p>

        {/* Name Selection */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Your Name
          </label>
          <input
            type="text"
            placeholder="Search for your name..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input-field mb-2"
          />
          <div className="border border-gray-300 rounded-md max-h-60 overflow-y-auto">
            {filteredMembers.length === 0 ? (
              <div className="px-3 py-2 text-gray-500 text-sm">No members found</div>
            ) : (
              filteredMembers.map((name) => (
                <button
                  key={name}
                  onClick={() => {
                    setSelectedName(name);
                    setSearchTerm(name);
                  }}
                  className={`w-full text-left px-3 py-2 hover:bg-blue-50 transition ${
                    selectedName === name ? 'bg-blue-100 font-medium' : ''
                  }`}
                >
                  {name}
                </button>
              ))
            )}
          </div>
          {selectedName && (
            <p className="mt-2 text-sm text-green-600">
              Selected: <strong>{selectedName}</strong>
            </p>
          )}
        </div>

        {/* Role Selection */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Your Role
          </label>
          <div className="space-y-2">
            <button
              onClick={() => setSelectedRole('technician')}
              className={`w-full px-4 py-3 border rounded-md text-left transition ${
                selectedRole === 'technician'
                  ? 'border-brand-blue bg-blue-50 font-medium'
                  : 'border-gray-300 hover:border-blue-300'
              }`}
            >
              <div className="font-medium">Technician</div>
              <div className="text-sm text-gray-600">
                Complete crit walks, upload photos, add notes
              </div>
            </button>
            <button
              onClick={() => setSelectedRole('manager')}
              className={`w-full px-4 py-3 border rounded-md text-left transition ${
                selectedRole === 'manager'
                  ? 'border-brand-red bg-red-50 font-medium'
                  : 'border-gray-300 hover:border-red-300'
              }`}
            >
              <div className="font-medium">Manager</div>
              <div className="text-sm text-gray-600">
                Create equipment, assign tasks, view all crit walks
              </div>
            </button>
          </div>
        </div>

        {/* Continue Button */}
        <button
          onClick={handleContinue}
          disabled={!selectedName || !selectedRole}
          className={`btn-primary w-full ${!selectedName || !selectedRole ? 'opacity-50' : ''}`}
        >
          Continue to Dashboard
        </button>

        <p className="mt-4 text-xs text-gray-500 text-center">
          {TEAM_MEMBERS.length} team members • DFW7 RME
        </p>
      </div>
    </div>
  );
}
```

### Step 8.3: Equipment Components

**File: `src/components/equipment/EquipmentCard.tsx`**
```typescript
import { Equipment, EquipmentStatus } from '../../types/equipment.types';
import { StatusBadge } from '../common/StatusBadge';
import { formatTimeAgo } from '../../utils/dateHelpers';
import { calculateStatus, getStatusBorderColor } from '../../utils/statusCalculator';

interface EquipmentCardProps {
  equipment: Equipment;
  status: EquipmentStatus | null;
  onClick: () => void;
}

export function EquipmentCard({ equipment, status, onClick }: EquipmentCardProps) {
  const currentStatus = status ? calculateStatus(status.lastCritWalkAt) : 'never';
  const borderColor = getStatusBorderColor(currentStatus);

  return (
    <div
      onClick={onClick}
      className={`card-hover border-l-4 ${borderColor}`}
    >
      <div className="flex items-start justify-between mb-4">
        <div>
          <h3 className="text-lg font-bold text-gray-900">{equipment.name}</h3>
          <p className="text-sm text-gray-600">{equipment.location}</p>
        </div>
        <StatusBadge status={currentStatus} />
      </div>

      <p className="text-sm text-gray-700 mb-4 line-clamp-2">{equipment.description}</p>

      <div className="flex items-center justify-between text-sm">
        <span className="px-2 py-1 bg-gray-100 rounded text-gray-700">
          {equipment.category}
        </span>
        {status?.lastCritWalkAt && (
          <span className="text-gray-600">
            Last: {formatTimeAgo(status.lastCritWalkAt)}
          </span>
        )}
        {!status?.lastCritWalkAt && (
          <span className="text-gray-400 italic">No walks yet</span>
        )}
      </div>
    </div>
  );
}
```

**File: `src/components/equipment/EquipmentGrid.tsx`**
```typescript
import { useState } from 'react';
import { useEquipment } from '../../hooks/useEquipment';
import { useUser } from '../../contexts/UserContext';
import { EquipmentCard } from './EquipmentCard';
import { EquipmentForm } from './EquipmentForm';
import { Modal } from '../common/Modal';
import { LoadingSpinner } from '../common/LoadingSpinner';
import { Button } from '../common/Button';
import { useNavigate } from 'react-router-dom';

export function EquipmentGrid() {
  const { equipment, statuses, loading } = useEquipment();
  const { isManager } = useUser();
  const navigate = useNavigate();
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [filterStatus, setFilterStatus] = useState<'all' | 'green' | 'yellow' | 'red' | 'never'>('all');

  const filteredEquipment = equipment.filter(eq => {
    if (filterStatus === 'all') return true;
    const status = statuses.get(eq.id);
    return status?.status === filterStatus;
  });

  if (loading) return <LoadingSpinner />;

  return (
    <div>
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Equipment</h2>
          <p className="text-gray-600">{equipment.length} total items</p>
        </div>
        {isManager && (
          <Button onClick={() => setShowCreateModal(true)}>
            + Create Equipment
          </Button>
        )}
      </div>

      {/* Filters */}
      <div className="flex gap-2 mb-6 flex-wrap">
        <button
          onClick={() => setFilterStatus('all')}
          className={`px-4 py-2 rounded-md transition ${
            filterStatus === 'all'
              ? 'bg-brand-blue text-white'
              : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
          }`}
        >
          All
        </button>
        <button
          onClick={() => setFilterStatus('green')}
          className={`px-4 py-2 rounded-md transition ${
            filterStatus === 'green'
              ? 'bg-status-green text-white'
              : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
          }`}
        >
          Green
        </button>
        <button
          onClick={() => setFilterStatus('yellow')}
          className={`px-4 py-2 rounded-md transition ${
            filterStatus === 'yellow'
              ? 'bg-status-yellow text-white'
              : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
          }`}
        >
          Yellow
        </button>
        <button
          onClick={() => setFilterStatus('red')}
          className={`px-4 py-2 rounded-md transition ${
            filterStatus === 'red'
              ? 'bg-status-red text-white'
              : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
          }`}
        >
          Red
        </button>
        <button
          onClick={() => setFilterStatus('never')}
          className={`px-4 py-2 rounded-md transition ${
            filterStatus === 'never'
              ? 'bg-status-gray text-white'
              : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
          }`}
        >
          Never
        </button>
      </div>

      {/* Grid */}
      {filteredEquipment.length === 0 ? (
        <div className="text-center py-12 text-gray-500">
          No equipment found
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredEquipment.map(eq => (
            <EquipmentCard
              key={eq.id}
              equipment={eq}
              status={statuses.get(eq.id) || null}
              onClick={() => navigate(`/equipment/${eq.id}`)}
            />
          ))}
        </div>
      )}

      {/* Create Modal */}
      <Modal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        title="Create New Equipment"
        size="medium"
      >
        <EquipmentForm onSuccess={() => setShowCreateModal(false)} />
      </Modal>
    </div>
  );
}
```

**File: `src/components/equipment/EquipmentForm.tsx`**
```typescript
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { useUser } from '../../contexts/UserContext';
import { createEquipment } from '../../services/equipment.service';
import { EquipmentFormData } from '../../types/equipment.types';
import { EQUIPMENT_CATEGORIES } from '../../data/teamMembers';
import { Button } from '../common/Button';

interface EquipmentFormProps {
  onSuccess: () => void;
}

export function EquipmentForm({ onSuccess }: EquipmentFormProps) {
  const { userProfile } = useUser();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<EquipmentFormData>({
    defaultValues: {
      critWalkInterval: 12,
      expectedPhotoCount: 1
    }
  });

  const onSubmit = async (data: EquipmentFormData) => {
    setLoading(true);
    setError('');

    try {
      await createEquipment(data, userProfile.name);
      onSuccess();
    } catch (err) {
      setError('Failed to create equipment. Please try again.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      {error && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-md text-red-600 text-sm">
          {error}
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Equipment Name *
        </label>
        <input
          {...register('name', { required: 'Name is required' })}
          type="text"
          className="input-field"
          placeholder="e.g., Conveyor Belt A-1"
        />
        {errors.name && (
          <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Description *
        </label>
        <textarea
          {...register('description', { required: 'Description is required' })}
          rows={3}
          className="input-field"
          placeholder="Describe the equipment..."
        />
        {errors.description && (
          <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Location *
        </label>
        <input
          {...register('location', { required: 'Location is required' })}
          type="text"
          className="input-field"
          placeholder="e.g., Building A, Floor 2, Zone 3"
        />
        {errors.location && (
          <p className="mt-1 text-sm text-red-600">{errors.location.message}</p>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Category *
        </label>
        <select
          {...register('category', { required: 'Category is required' })}
          className="input-field"
        >
          <option value="">Select a category</option>
          {EQUIPMENT_CATEGORIES.map(cat => (
            <option key={cat} value={cat}>
              {cat}
            </option>
          ))}
        </select>
        {errors.category && (
          <p className="mt-1 text-sm text-red-600">{errors.category.message}</p>
        )}
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Crit Walk Interval (hours)
          </label>
          <input
            {...register('critWalkInterval', {
              required: 'Interval is required',
              min: { value: 1, message: 'Must be at least 1 hour' }
            })}
            type="number"
            className="input-field"
          />
          {errors.critWalkInterval && (
            <p className="mt-1 text-sm text-red-600">{errors.critWalkInterval.message}</p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Expected Photo Count
          </label>
          <input
            {...register('expectedPhotoCount', {
              required: 'Photo count is required',
              min: { value: 1, message: 'Must be at least 1' }
            })}
            type="number"
            className="input-field"
          />
          {errors.expectedPhotoCount && (
            <p className="mt-1 text-sm text-red-600">{errors.expectedPhotoCount.message}</p>
          )}
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Photo Guidelines (optional)
        </label>
        <textarea
          {...register('photoGuidelines')}
          rows={2}
          className="input-field"
          placeholder="e.g., Take photos from front and side angles..."
        />
      </div>

      <div className="flex gap-2 pt-4">
        <Button type="submit" disabled={loading} fullWidth>
          {loading ? 'Creating...' : 'Create Equipment'}
        </Button>
      </div>
    </form>
  );
}
```

### Step 8.4: Crit Walk Components

**File: `src/components/critWalk/PhotoUpload.tsx`**
```typescript
import { useState, useRef } from 'react';

interface PhotoUploadProps {
  onPhotosSelected: (files: File[]) => void;
  maxPhotos?: number;
}

export function PhotoUpload({ onPhotosSelected, maxPhotos = 10 }: PhotoUploadProps) {
  const [previews, setPreviews] = useState<string[]>([]);
  const [files, setFiles] = useState<File[]>([]);
  const inputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = Array.from(e.target.files || []);
    const totalFiles = files.length + selectedFiles.length;

    if (totalFiles > maxPhotos) {
      alert(`You can only upload up to ${maxPhotos} photos`);
      return;
    }

    const newFiles = [...files, ...selectedFiles];
    setFiles(newFiles);
    onPhotosSelected(newFiles);

    // Create previews
    selectedFiles.forEach(file => {
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviews(prev => [...prev, reader.result as string]);
      };
      reader.readAsDataURL(file);
    });
  };

  const removePhoto = (index: number) => {
    const newFiles = files.filter((_, i) => i !== index);
    const newPreviews = previews.filter((_, i) => i !== index);
    
    setFiles(newFiles);
    setPreviews(newPreviews);
    onPhotosSelected(newFiles);
  };

  return (
    <div>
      <label className="block text-sm font-medium text-gray-700 mb-2">
        Photos ({files.length}/{maxPhotos})
      </label>

      {previews.length > 0 && (
        <div className="grid grid-cols-3 gap-2 mb-4">
          {previews.map((preview, index) => (
            <div key={index} className="relative">
              <img
                src={preview}
                alt={`Preview ${index + 1}`}
                className="w-full h-32 object-cover rounded-md"
              />
              <button
                type="button"
                onClick={() => removePhoto(index)}
                className="absolute top-1 right-1 bg-brand-red text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-brand-red-light"
              >
                &times;
              </button>
            </div>
          ))}
        </div>
      )}

      <button
        type="button"
        onClick={() => inputRef.current?.click()}
        disabled={files.length >= maxPhotos}
        className="w-full px-4 py-3 border-2 border-dashed border-gray-300 rounded-md hover:border-brand-blue transition disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <div className="text-center">
          <p className="text-sm text-gray-600">
            {files.length === 0 ? 'Click to upload photos' : 'Add more photos'}
          </p>
          <p className="text-xs text-gray-500 mt-1">
            JPG, PNG up to 10MB each
          </p>
        </div>
      </button>

      <input
        ref={inputRef}
        type="file"
        accept="image/*"
        multiple
        onChange={handleFileChange}
        className="hidden"
      />
    </div>
  );
}
```

**File: `src/components/critWalk/CritWalkForm.tsx`**
```typescript
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { useUser } from '../../contexts/UserContext';
import { createCritWalk } from '../../services/critWalk.service';
import { CritWalkFormData } from '../../types/critWalk.types';
import { PhotoUpload } from './PhotoUpload';
import { Button } from '../common/Button';

interface CritWalkFormProps {
  equipmentId: string;
  equipmentName: string;
  onSuccess: () => void;
}

export function CritWalkForm({ equipmentId, equipmentName, onSuccess }: CritWalkFormProps) {
  const { userProfile } = useUser();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [photos, setPhotos] = useState<File[]>([]);

  const { register, handleSubmit } = useForm<{ notes: string }>();

  const onSubmit = async (data: { notes: string }) => {
    if (photos.length === 0) {
      setError('Please upload at least one photo');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const critWalkData: CritWalkFormData = {
        equipmentId,
        notes: data.notes,
        photos
      };

      await createCritWalk(critWalkData, userProfile.name, equipmentName);
      onSuccess();
    } catch (err) {
      setError('Failed to create crit walk. Please try again.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      {error && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-md text-red-600 text-sm">
          {error}
        </div>
      )}

      <PhotoUpload onPhotosSelected={setPhotos} />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Notes (optional)
        </label>
        <textarea
          {...register('notes')}
          rows={4}
          className="input-field"
          placeholder="Add any observations or notes..."
        />
      </div>

      <div className="flex gap-2 pt-4">
        <Button type="submit" disabled={loading || photos.length === 0} fullWidth>
          {loading ? 'Submitting...' : 'Complete Crit Walk'}
        </Button>
      </div>
    </form>
  );
}
```

**File: `src/components/critWalk/CritWalkHistory.tsx`**
```typescript
import { useEffect, useState } from 'react';
import { getCritWalksByEquipment } from '../../services/critWalk.service';
import { CritWalk } from '../../types/critWalk.types';
import { formatTimestamp } from '../../utils/dateHelpers';
import { LoadingSpinner } from '../common/LoadingSpinner';

interface CritWalkHistoryProps {
  equipmentId: string;
}

export function CritWalkHistory({ equipmentId }: CritWalkHistoryProps) {
  const [critWalks, setCritWalks] = useState<CritWalk[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadCritWalks();
  }, [equipmentId]);

  const loadCritWalks = async () => {
    try {
      const walks = await getCritWalksByEquipment(equipmentId);
      setCritWalks(walks);
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <LoadingSpinner />;

  if (critWalks.length === 0) {
    return (
      <div className="text-center py-8 text-gray-500">
        No crit walks completed yet
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {critWalks.map(walk => (
        <div key={walk.id} className="card">
          <div className="flex items-start justify-between mb-3">
            <div>
              <p className="font-medium text-gray-900">{walk.technicianName}</p>
              <p className="text-sm text-gray-600">
                {formatTimestamp(walk.completedAt)}
              </p>
            </div>
            <span className="px-2 py-1 bg-blue-100 text-brand-blue text-sm rounded">
              {walk.photos.length} photo{walk.photos.length !== 1 ? 's' : ''}
            </span>
          </div>

          {walk.notes && (
            <p className="text-sm text-gray-700 mb-3">{walk.notes}</p>
          )}

          <div className="grid grid-cols-4 gap-2">
            {walk.photos.map((photo, index) => (
              <img
                key={index}
                src={photo.storageUrl}
                alt={`Crit walk photo ${index + 1}`}
                className="w-full h-24 object-cover rounded cursor-pointer hover:opacity-80"
                onClick={() => window.open(photo.storageUrl, '_blank')}
              />
            ))}
          </div>
        </div>
      ))}
    </div>
  );
}
```

---

## Phase 9: Pages

### Step 9.1: Login Page

**File: `src/pages/Login.tsx`**
```typescript
import { useState } from 'react';
import { loginAsTeam } from '../services/auth.service';
import { Logo } from '../assets/Logo';

export function Login() {
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    if (password === import.meta.env.VITE_TEAM_LOGIN_PASSWORD) {
      const result = await loginAsTeam();
      if (!result.success) {
        setError('Login failed. Please try again.');
      }
    } else {
      setError('Incorrect password');
    }

    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full">
        <div className="flex justify-center mb-6">
          <Logo size="large" />
        </div>

        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">Crit Walk Dashboard</h1>
          <p className="text-gray-600">DFW7 RME Team Login</p>
        </div>

        <form onSubmit={handleLogin}>
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Team Password
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Enter team password"
              className="input-field"
              required
              autoFocus
            />
          </div>

          {error && (
            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-600 text-sm">
              {error}
            </div>
          )}

          <button
            type="submit"
            disabled={loading}
            className="btn-primary w-full"
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>

        <p className="mt-6 text-xs text-gray-500 text-center">
          Distribution Facility Maintenance Team
        </p>
      </div>
    </div>
  );
}
```

### Step 9.2: Dashboard Page

**File: `src/pages/Dashboard.tsx`**
```typescript
import { EquipmentGrid } from '../components/equipment/EquipmentGrid';

export function Dashboard() {
  return (
    <div>
      <EquipmentGrid />
    </div>
  );
}
```

### Step 9.3: Equipment Detail Page

**File: `src/pages/EquipmentDetail.tsx`**
```typescript
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getEquipmentById, getEquipmentStatus } from '../services/equipment.service';
import { Equipment, EquipmentStatus } from '../types/equipment.types';
import { useUser } from '../contexts/UserContext';
import { CritWalkHistory } from '../components/critWalk/CritWalkHistory';
import { CritWalkForm } from '../components/critWalk/CritWalkForm';
import { Modal } from '../components/common/Modal';
import { StatusBadge } from '../components/common/StatusBadge';
import { Button } from '../components/common/Button';
import { LoadingSpinner } from '../components/common/LoadingSpinner';
import { calculateStatus } from '../utils/statusCalculator';
import { formatTimeAgo } from '../utils/dateHelpers';

export function EquipmentDetail() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { isTechnician } = useUser();
  const [equipment, setEquipment] = useState<Equipment | null>(null);
  const [status, setStatus] = useState<EquipmentStatus | null>(null);
  const [loading, setLoading] = useState(true);
  const [showCritWalkModal, setShowCritWalkModal] = useState(false);

  useEffect(() => {
    if (id) {
      loadEquipment();
    }
  }, [id]);

  const loadEquipment = async () => {
    if (!id) return;

    try {
      const [equipmentData, statusData] = await Promise.all([
        getEquipmentById(id),
        getEquipmentStatus(id)
      ]);

      setEquipment(equipmentData);
      setStatus(statusData);
    } finally {
      setLoading(false);
    }
  };

  const handleCritWalkSuccess = () => {
    setShowCritWalkModal(false);
    loadEquipment();
  };

  if (loading) return <LoadingSpinner />;
  if (!equipment) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500 mb-4">Equipment not found</p>
        <Button onClick={() => navigate('/dashboard')}>Back to Dashboard</Button>
      </div>
    );
  }

  const currentStatus = status ? calculateStatus(status.lastCritWalkAt) : 'never';

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="card">
        <div className="flex items-start justify-between mb-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{equipment.name}</h1>
            <p className="text-gray-600">{equipment.location}</p>
          </div>
          <StatusBadge status={currentStatus} size="large" />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div>
            <p className="text-sm text-gray-600">Category</p>
            <p className="font-medium">{equipment.category}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Last Crit Walk</p>
            <p className="font-medium">
              {status?.lastCritWalkAt
                ? formatTimeAgo(status.lastCritWalkAt)
                : 'Never'}
            </p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Total Walks</p>
            <p className="font-medium">{status?.totalWalksCompleted || 0}</p>
          </div>
        </div>

        <p className="text-gray-700 mb-4">{equipment.description}</p>

        {equipment.photoGuidelines && (
          <div className="bg-blue-50 border border-blue-200 rounded-md p-3">
            <p className="text-sm font-medium text-brand-blue mb-1">Photo Guidelines:</p>
            <p className="text-sm text-blue-800">{equipment.photoGuidelines}</p>
          </div>
        )}

        {isTechnician && (
          <div className="mt-4">
            <Button onClick={() => setShowCritWalkModal(true)} fullWidth>
              Complete Crit Walk
            </Button>
          </div>
        )}
      </div>

      {/* History */}
      <div className="card">
        <h2 className="text-xl font-bold mb-4">Crit Walk History</h2>
        <CritWalkHistory equipmentId={equipment.id} />
      </div>

      {/* Crit Walk Modal */}
      <Modal
        isOpen={showCritWalkModal}
        onClose={() => setShowCritWalkModal(false)}
        title="Complete Crit Walk"
        size="medium"
      >
        <CritWalkForm
          equipmentId={equipment.id}
          equipmentName={equipment.name}
          onSuccess={handleCritWalkSuccess}
        />
      </Modal>
    </div>
  );
}
```

### Step 9.4: Layout Component

**File: `src/components/Layout.tsx`**
```typescript
import { ReactNode } from 'react';
import { useUser } from '../contexts/UserContext';
import { useNavigate } from 'react-router-dom';
import { logout } from '../services/auth.service';
import { Logo } from '../assets/Logo';

interface LayoutProps {
  children: ReactNode;
  onChangeUser: () => void;
}

export function Layout({ children, onChangeUser }: LayoutProps) {
  const { userProfile } = useUser();
  const navigate = useNavigate();

  const handleLogout = async () => {
    await logout();
    navigate('/login');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm sticky top-0 z-10 border-b-2 border-brand-gear">
        <div className="max-w-7xl mx-auto px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Logo size="small" className="cursor-pointer" onClick={() => navigate('/dashboard')} />
            <div>
              <h1
                className="text-xl font-bold cursor-pointer hover:text-brand-blue transition"
                onClick={() => navigate('/dashboard')}
              >
                Crit Walk Dashboard
              </h1>
              <span className="text-xs text-gray-500">DFW7 RME</span>
            </div>
          </div>

          <div className="flex items-center gap-4">
            <div className="text-right">
              <p className="font-medium text-sm">{userProfile.name}</p>
              <span
                className={`text-xs px-2 py-0.5 rounded ${
                  userProfile.role === 'manager'
                    ? 'bg-red-100 text-brand-red'
                    : 'bg-blue-100 text-brand-blue'
                }`}
              >
                {userProfile.role}
              </span>
            </div>

            <button
              onClick={onChangeUser}
              className="px-3 py-1.5 text-sm border border-gray-300 rounded-md hover:bg-gray-50 transition"
            >
              Change User
            </button>

            <button
              onClick={handleLogout}
              className="px-3 py-1.5 text-sm bg-brand-red text-white rounded-md hover:bg-brand-red-light transition"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 py-6">{children}</main>

      {/* Footer (optional) */}
      <footer className="bg-white border-t border-gray-200 mt-12">
        <div className="max-w-7xl mx-auto px-4 py-4 text-center text-sm text-gray-500">
          DFW7 RME • Crit Walk Dashboard • {new Date().getFullYear()}
        </div>
      </footer>
    </div>
  );
}
```

---

## Phase 10: Main App & Routing

**File: `src/App.tsx`**
```typescript
import { useState, useEffect } from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from './services/firebase';
import { UserProvider } from './contexts/UserContext';
import { UserProfile } from './types/user.types';
import { Login } from './pages/Login';
import { UserSelection } from './components/UserSelection';
import { Dashboard } from './pages/Dashboard';
import { EquipmentDetail } from './pages/EquipmentDetail';
import { Layout } from './components/Layout';
import { LoadingSpinner } from './components/common/LoadingSpinner';

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setIsAuthenticated(!!user);

      if (user) {
        const savedProfile = localStorage.getItem('userProfile');
        if (savedProfile) {
          setUserProfile(JSON.parse(savedProfile));
        }
      } else {
        setUserProfile(null);
        localStorage.removeItem('userProfile');
      }

      setLoading(false);
    });

    return unsubscribe;
  }, []);

  const handleUserSelected = (profile: UserProfile) => {
    setUserProfile(profile);
  };

  const handleChangeUser = () => {
    localStorage.removeItem('userProfile');
    setUserProfile(null);
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner />
      </div>
    );
  }

  return (
    <BrowserRouter>
      <Routes>
        {/* Not authenticated */}
        {!isAuthenticated && (
          <>
            <Route path="/login" element={<Login />} />
            <Route path="*" element={<Navigate to="/login" replace />} />
          </>
        )}

        {/* Authenticated but no profile */}
        {isAuthenticated && !userProfile && (
          <>
            <Route
              path="/select-user"
              element={<UserSelection onUserSelected={handleUserSelected} />}
            />
            <Route path="*" element={<Navigate to="/select-user" replace />} />
          </>
        )}

        {/* Authenticated with profile */}
        {isAuthenticated && userProfile && (
          <Route
            path="*"
            element={
              <UserProvider userProfile={userProfile}>
                <Layout onChangeUser={handleChangeUser}>
                  <Routes>
                    <Route path="/dashboard" element={<Dashboard />} />
                    <Route path="/equipment/:id" element={<EquipmentDetail />} />
                    <Route path="*" element={<Navigate to="/dashboard" replace />} />
                  </Routes>
                </Layout>
              </UserProvider>
            }
          />
        )}
      </Routes>
    </BrowserRouter>
  );
}

export default App;
```

**File: `src/main.tsx`**
```typescript
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

---

## Phase 11: Firestore Rules

**File: `firestore.rules`**
```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Equipment
    match /equipment/{equipmentId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      
      // Crit walks subcollection
      match /critWalks/{critWalkId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated();
      }
    }
    
    // Equipment Status
    match /equipmentStatus/{statusId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Assignments
    match /assignments/{assignmentId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
  }
}
```

---

## Phase 12: Storage Rules

**File: `storage.rules`**
```javascript
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /equipment/{equipmentId}/critwalks/{critWalkId}/{filename} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
  }
}
```

---

## Phase 13: Build & Deploy Configuration

**File: `vite.config.ts`**
```typescript
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
    sourcemap: false
  }
});
```

**File: `firebase.json`**
```json
{
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  },
  "storage": {
    "rules": "storage.rules"
  }
}
```

**Add to `package.json`:**
```json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "deploy": "npm run build && firebase deploy"
  }
}
```

---

## Phase 14: Complete Installation Steps

```bash
# 1. Clone/create project
npm create vite@latest crit-walk-dashboard -- --template react-ts
cd crit-walk-dashboard

# 2. Install all dependencies
npm install
npm install firebase react-router-dom date-fns react-hook-form
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

# 3. Setup Firebase
npm install -g firebase-tools
firebase login
firebase init
# Select: Firestore, Storage, Hosting

# 4. Create all directories
mkdir -p src/{assets,components/{common,equipment,critWalk,assignments},pages,services,hooks,contexts,types,data,utils}

# 5. Add the DFW7 RME logo to src/assets/logo.svg

# 6. Create .env file with Firebase credentials

# 7. Create all files as specified in these instructions

# 8. Deploy rules
firebase deploy --only firestore:rules,storage:rules

# 9. Create team account in Firebase Console
# Email: dfw7rme@critwalk.com
# Password: dfw7rme

# 10. Run development server
npm run dev

# 11. Build and deploy
npm run build
firebase deploy
```

---

## Critical Design Guidelines

### Brand Colors Usage:
- **Primary Actions**: Use `brand-blue` (#003F87)
- **Danger/Delete Actions**: Use `brand-red` (#BF0A30)
- **Borders/Dividers**: Use `brand-gear` (#808080)
- **Status Indicators**: Use `status-green`, `status-yellow`, `status-red`, `status-gray`

### Typography:
- **Headings**: Bold, use brand colors for emphasis
- **Body**: Gray-900 for primary text, Gray-600 for secondary
- **Labels**: Gray-700, medium weight

### Component Styling:
- All buttons should use the btn-{variant} classes
- All inputs should use input-field class
- All cards should use card or card-hover classes
- Status badges should use the StatusBadge component
- Loading states should use LoadingSpinner component

### Logo Usage:
- Login page: Large logo, centered
- Header: Small logo, left side
- Always use the Logo component, never raw SVG

---

## Testing Checklist

Before deployment, verify:
1. ✅ Logo displays correctly on all pages
2. ✅ Brand colors are consistent throughout
3. ✅ Team account login works (dfw7rme / dfw7rme)
4. ✅ User selection shows all 73 members
5. ✅ Equipment creation (manager role)
6. ✅ Crit walk completion (technician role)
7. ✅ Photo upload and display
8. ✅ Status colors update correctly
9. ✅ Mobile responsive design
10. ✅ Change user functionality
11. ✅ Logout functionality
12. ✅ Navigation between pages

---

This completes the comprehensive, brand-consistent build instructions for the DFW7 RME Crit Walk Dashboard. All styling and components are designed to work cohesively with the provided logo and brand identity.